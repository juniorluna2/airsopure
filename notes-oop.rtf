{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 OOP Notes\
\
Class / Object / Instance\
a blueprint for a house design is like a class description. all the houses built from that blueprint are objects of that class. a given house is an instance\
\
Encapsulation\
internal representation of an object is hidden from the view outside of the object\'92s definition. only own methods can directly inspect or manipulate it\'92s own fields. Encapsulation is the hiding of data implementation by restricting access to accusers and mutators.\
Accessor - get() methods\
Mutators - modify state of object while hiding implementation on how that\'92s done. set() method\
Protection like this is called Encapsulation.\
\
Abstraction\
implementation of an object that contains the same essential properties and actions we can find in the original object we are representing\
\
Inheritance\
subclasses inheriting their parent\'92s classes attributes. also known as a derived classes or child classes. parent class is also known as a superclass.\
\
Polymorphism (one name, different forms)\
multiple methods with the same name but slightest differ functionality. 2 different types of polymorphism; overriding and overloading.\
Overriding (run-time polymorphism) - using same method name in different class\
Overloading (compile-time polymorphism) - using same method name\
\
}